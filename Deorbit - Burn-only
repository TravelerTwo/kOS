// Bouncy steering near the ground.

CLEARSCREEN.
SET config:ipu TO 400.
SET terminal:height TO 20.
SET terminal:width TO 40.

FUNCTION h_accel {
    LOCAL l IS CHOOSE 0 IF NOT modeBurn ELSE min(5, groundspeed / 5).
    LOCAL v IS vang(up:vector, -velocity:surface) + l.
    LOCAL hAccel IS CHOOSE groundspeed / 5 IF verticalspeed > -10 ELSE sqrt((burnAccel / cos(v))^2 - burnAccel^2).
    // LOCAL hAccel IS CHOOSE 0 IF verticalspeed > -1 ELSE sqrt((burnAccel / cos(v))^2 - burnAccel^2).

    print round(v,2) + "    " at(5,14).
    print round(burnAccel,2) + "    " at(5,15).
    print round(burnAccel / cos(v),2) + "    " at(5,16).
    print round(hAccel,2) + "    " at(5,17).
    print round(vang(-velocity:surface, facing:vector),2) + "    " at(5,18).

    RETURN vxcl(up:vector, -velocity:surface):normalized * hAccel.
}

// PHYSICAL PROPERTIES.
LOCAL b IS ship:bounds.
LOCAL g IS body:mu / body:position:sqrmagnitude.

// VARIABLES.
LOCAL maxAccel IS ship:availablethrust / ship:mass.

LOCAL burnAccel IS verticalspeed^2 / 2 / b:bottomaltradar + g.
LOCAL burnThrot IS burnAccel / maxAccel.
LOCAL navTime IS groundspeed / maxAccel.

// SYSTEM CONTROL.
LOCAL modeBurn IS FALSE.
LOCAL steeringCtrl IS facing.
LOCAL throttleCtrl IS 0.

PRINT " ".
PRINT " Local gravity =".
PRINT " Local TWR     =".
PRINT " ".
PRINT " Radar alt     =".
PRINT " Time to stop  =".
PRINT "--------------------------".
PRINT " ".
PRINT " Burn accel    =".
PRINT " Burn throt    =".
PRINT " ".
PRINT " Groundspeed   =".
PRINT " Verticalspeed =".
PRINT "--------------------------".
PRINT " ".
PRINT " ".
PRINT " ".
PRINT " ".

sas OFF.
LOCK steering TO steeringCtrl.
LOCK throttle TO 0.

IF body:atm:exists {
    brakes ON. 
    rcs ON.
}

UNTIL ship:status = "landed" OR ship:status = "splashed" OR sas {

      SET g TO body:mu / body:position:sqrmagnitude.
      SET burnAccel TO CHOOSE g IF verticalspeed > -1 ELSE verticalspeed^2 / 2 / (b:bottomaltradar - 1) + g.
      SET burnThrot TO burnAccel / maxAccel.
      SET maxAccel TO ship:availablethrust / ship:mass.
      SET navTime TO (verticalspeed + sqrt(max(0, 2 * b:bottomaltradar * max(g, burnAccel * throttle) + verticalspeed^2))) / burnAccel.
      SET steeringCtrl TO lookdirup(up:vector * burnAccel + h_accel(), facing:topvector).
      SET throttleCtrl TO burnThrot.

      IF NOT modeBurn AND verticalspeed < -1 AND (burnThrot > 0.9 OR b:bottomaltradar < 500) {
            SET modeBurn TO TRUE.
            LOCK throttle TO throttleCtrl.

      } ELSE IF modeBurn AND (verticalspeed > 0 OR burnThrot < 0.5 AND b:bottomaltradar > 500) {
            SET modeBurn TO FALSE.
            LOCK throttle TO 0.
      }

      IF NOT gear AND verticalspeed < -1 AND b:bottomaltradar < 500 { gear ON. }

      PRINT round(g,2) + "    " at(18,1).
      PRINT round(maxAccel / g,2) + "    " at(18,2).
      PRINT round(b:bottomaltradar) + "  " at(18,4).
      PRINT round(navTime,2) + "    " at(18,5).
      PRINT round(burnAccel,2) + "    " at(18,8).
      PRINT round(burnThrot,2) + "    " at(18,9).
      PRINT round(groundspeed,2) + "    " at(18,11).
      PRINT round(verticalspeed,2) + "    " at(18,12).

      WAIT 0.
}

SET ship:control:pilotmainthrottle TO 0.
SET throttleCtrl TO 0.
UNLOCK ALL.
rcs OFF.
sas ON.
