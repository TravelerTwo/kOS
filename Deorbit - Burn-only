// Bouncy steering near the ground.

CLEARSCREEN.
SET config:ipu TO 400.
SET terminal:height TO 20.
SET terminal:width TO 40.

// PHYSICAL PROPERTIES.
LOCAL b IS ship:bounds.
LOCAL g IS body:mu / body:position:sqrmagnitude.

// VARIABLES.
LOCAL maxAccel IS ship:availablethrust / ship:mass.
LOCAL maxAngle IS vang(up:vector, -velocity:surface).
LOCAL navPitch IS vang(up:vector, -velocity:surface).

LOCAL burnhAccel IS 0.
LOCAL burnvAccel IS verticalspeed^2 / 2 / b:bottomaltradar + g.
LOCAL burnThrot IS (burnhAccel + burnvAccel) / maxAccel.
LOCAL navTime IS -verticalspeed / maxAccel.

// SYSTEM CONTROL.
LOCAL modeBurn IS FALSE.
LOCAL steeringCtrl IS facing:vector.
LOCAL throttleCtrl IS 0.

PRINT " ".
PRINT " Local gravity =".
PRINT " Local TWR     =".
PRINT " ".
PRINT " Radar alt     =".
PRINT " Time to stop  =".
PRINT "--------------------------".
PRINT " ".
PRINT " Burn h accel  =".
PRINT " Burn v accel  =".
PRINT " Burn throt    =".
PRINT " ".
PRINT " Groundspeed   =".
PRINT " Verticalspeed =".
PRINT "--------------------------".

sas OFF.
LOCK steering TO steeringCtrl.
LOCK throttle TO 0.

IF body:atm:exists {
    brakes ON. 
    rcs ON.
}

UNTIL ship:status = "landed" OR ship:status = "splashed" OR sas {

// burnThrot is too high with hAccel and too low without hAccel.
// test burnvAccel / maxAccel / cos(vang(up:vector, -velocity:surface))
// steering limiter can cause drift because hAccel is ~0.
// limit maxAngle to <0.9 if not modeBurn and >45Â° angle
      SET g TO body:mu / body:position:sqrmagnitude.
      SET burnhAccel TO  min(burnvAccel - g + sqrt(groundspeed) / 10, sqrt((burnvAccel / cos(navPitch))^2 - burnvAccel^2)).
      SET burnvAccel TO CHOOSE g IF verticalspeed > -1 ELSE verticalspeed^2 / 2 / (b:bottomaltradar - 1) + g.
      SET burnThrot TO burnvAccel / maxAccel / cos(navPitch).
      SET maxAccel TO ship:availablethrust / ship:mass.
      SET maxAngle TO min(maxAngle, vang(up:vector, -velocity:surface)).
      SET navPitch TO CHOOSE min(maxAngle, vang(up:vector, -velocity:surface)) IF modeBurn ELSE min(45, vang(up:vector, -velocity:surface)).
      SET navTime TO (verticalspeed + sqrt(max(0, 2 * b:bottomaltradar * max(g, burnvAccel * throttle) + verticalspeed^2))) / burnvAccel.
      SET steeringCtrl TO lookdirup(up:vector * burnvAccel + vxcl(up:vector, -velocity:surface):normalized * burnhAccel, facing:topvector).
      SET throttleCtrl TO burnThrot.

      IF NOT modeBurn AND verticalspeed < -1 AND (burnThrot > 0.9 OR b:bottomaltradar < 500) {
            IF NOT gear { gear ON. }
            SET modeBurn TO TRUE.
            LOCK throttle TO throttleCtrl.

      } ELSE IF modeBurn AND (verticalspeed > 0 OR burnThrot < 0.5 AND b:bottomaltradar > 500) {
            SET modeBurn TO FALSE.
            LOCK throttle TO 0.
      }

      PRINT round(g,2) + "    " at(18,1).
      PRINT round(maxAccel / g,2) + "    " at(18,2).
      PRINT round(b:bottomaltradar) + "  " at(18,4).
      PRINT round(navTime,2) + "    " at(18,5).
      PRINT round(burnhAccel,2) + "  " + round(burnvAccel - g,2) + "  " + round(burnvAccel - g + sqrt(groundspeed) / 10,2) + "  " + round(sqrt((burnvAccel / cos(navPitch))^2 - burnvAccel^2),2) + "    " at(18,8).
      PRINT round(burnvAccel,2) + "    " at(18,9).
      PRINT round(burnThrot,2) + "    " at(18,10).
      PRINT round(groundspeed,2) + "    " at(18,12).
      PRINT round(verticalspeed,2) + "    " at(18,13).

      WAIT 0.
}

SET ship:control:pilotmainthrottle TO 0.
SET throttleCtrl TO 0.
UNLOCK ALL.
rcs OFF.
sas ON.
