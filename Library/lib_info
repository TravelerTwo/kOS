FUNCTION burn_info {
    PARAMETER dV, iter.
    LOCAL i IS 0.
    LOCAL burndV IS 0.
    LOCAL burnTime IS 0.
    LOCAL checkMean IS TRUE.
    LOCAL meanTime IS 0.

    FOR s IN iter {
        LOCAL stagedV IS s[5].
        LOCAL ve IS 9.80665 * s[4].

        IF checkMean AND burndV + stagedV >= dV / 2 {
            LOCAL meanMass IS s[0] / constant:e^((dV / 2 - burndV) / ve).
            SET checkMean TO FALSE.
            SET meanTime TO burnTime + (s[0] - meanMass) / s[3].
        }

        IF burndV + stagedV > dV { SET stagedV TO dV - burndV. }
        LOCAL burnMass IS s[0] / constant:e^(stagedV / ve).

        SET burndV TO burndV + stagedV.
        SET burnTime TO burnTime + (s[0] - burnMass) / s[3] + i.
        SET i TO i + 1.

        IF burndV >= dV { BREAK. }

        WAIT 0.
    }

    IF burndV < dV {
        PRINT " Insufficient delta-v: " + round(burndV,2).
        RETURN list(0,0).

    } ELSE { RETURN list(burnTime, meanTime). }
}

FUNCTION stage_info {
    LOCAL endpart IS ship:rootpart.
    LOCAL list_roots IS list().
    LOCAL list_sections IS list().
    LOCAL t0 IS time:seconds.

    FOR p IN ship:parts {
        IF p:istype("Engine") AND p:stage > endpart:stage { SET endpart TO p. }
        WAIT 0.
    }

    FUNCTION root_search {
        PARAMETER p.
        WAIT 0.

        LOCAL add_root IS FALSE.

        IF p:hasparent {
            IF p:parent:istype("Engine") AND p:istype("Decoupler") { SET add_root TO TRUE. }
            IF p:parent:name:contains("EnginePlate") AND NOT p:istype("Engine") {
                FOR c IN p:parent:children {
                    WAIT 0.
                    IF c:istype("Engine") {
                        SET add_root TO TRUE.
                        BREAK.
                    }
                }
            }

        } ELSE IF NOT p:hasparent { SET add_root TO TRUE. }

        IF add_root {
            LOCAL section IS list().

            list_roots:insert(0, p).

            FUNCTION section_search {
                PARAMETER p.
                WAIT 0.

                section:add(p).

                IF NOT p:children:empty {
                    FOR c IN p:children {
                        IF NOT list_roots:contains(c) { section_search(c). }
                    }
                }
            }
            section_search(list_roots[0]).
            list_sections:insert(0, section).
        }
        IF p:hasparent { root_search(p:parent). }
    }

    root_search(endpart).

    LOCAL i IS 0.
    LOCAL list_stages IS list().
    LOCAL m IS 0.

    FOR s IN list_sections {
        LOCAL section IS list(0,0,0,0,0,0). // mass, drymass, thrust, flow, isp, dV

        FOR p IN s {
            IF p:istype("Engine") AND p:allowshutdown {
                IF section[1] = 0 {
                    LOCAL a IS CHOOSE TRUE IF NOT p:ignition ELSE FALSE.
                    IF a { p:activate. }

                    FOR r IN p:consumedresources:keys {
                        WAIT 0.
                        SET section[1] TO section[1] + p:consumedresources[r]:amount * p:consumedresources[r]:density.
                    }
                    IF a { p:shutdown. }
                }
                SET section[2] TO section[2] + p:possiblethrustat(0).
                SET section[3] TO section[3] + p:possiblethrustat(0) / (9.80665 * p:visp).
                SET section[4] TO section[2] / (9.80665 * section[3]).
            }
            SET m TO m + p:mass.

// This checks every part. Can it be changed to check for robotic parts without iterating through modules of every part?
// IF p:hasmodule("ModuleRoboticServoHinge") { SET m TO m + p:mass. }
// Could this be adapted to check for "ModuleRobotic"?
            FOR mod IN p:modules {
                IF mod:contains("ModuleRobotic") { SET m TO m + p:mass. }   // Required due to half mass bug with robotic parts.
                WAIT 0.
            }
        }
        SET section[0] TO m.
        SET section[1] TO section[0] - section[1].
        SET section[5] TO (9.80665 * section[4]) * ln(section[0] / section[1]).
        list_stages:insert(0, section).
    }
    PRINT " Runtime: " + round(time:seconds - t0,2) + "; Stages: " + list_stages:length.
    RETURN list_stages.
}
