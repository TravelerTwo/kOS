// https://www.reddit.com/r/Kos/comments/ap7si4/tips_for_more_precise_maneuver_node_execution/
// Retrograde launch, pitch isn't perfect, but it's working.
// Add staging protection during launch and circularization.
// Add multi-stage circularization capability.
// Add 'balancing' throttle to launch.
// Apoapsis printing looks like it didn't update after desiredApo + 10000?

PARAMETER desiredApo IS 100000.
PARAMETER desiredInc IS 0.

CLEARSCREEN.
SET config:ipu TO 500.
SET steeringmanager:rollcontrolanglerange TO 180.
SET steeringmanager:rolltorquefactor TO 0.5.
SET terminal:height TO 20.
SET terminal:width TO 40.
IF HASNODE { REMOVE nextnode. }

FUNCTION burn_dV {
    LOCAL r IS body:radius + apoapsis.
    LOCAL velApo IS sqrt(body:mu * (2 / r - 1 / obt:semimajoraxis)).
    LOCAL velCirc IS sqrt(body:mu / r).
    RETURN velCirc - velApo.
}

FUNCTION burn_time {
    PARAMETER dV.

    LOCAL elist IS LIST().
    LIST ENGINES IN elist.

    LOCAL ispFlow IS 0.
    LOCAL ispThrust IS 0.
    LOCAL ispTotal IS 0.

    FOR e IN elist {
        IF e:ignition {
            IF e:flameout { e:shutdown(). }
            ELSE {
                SET ispFlow TO ispFlow + e:availablethrust / (e:isp * 9.80665).
                SET ispThrust TO ispThrust + e:availablethrust.
                SET ispTotal TO ispThrust / (ispFlow * 9.80665).
            }
        }
        WAIT 0.
    }

    LOCAL ve IS 9.80665 * ispTotal.
    LOCAL burnFlow IS ship:availablethrust / ve.
    LOCAL burnMass IS ship:mass / constant():e^(dV / ve).
    RETURN (ship:mass - burnMass) / burnFlow.
}

FUNCTION launch_azimuth {
    PARAMETER inc.

    LOCAL V_orb IS max(sqrt(body:mu / body:position:mag), velocity:orbit:mag + 1).
    LOCAL az_orb IS arcsin(cos(inc) / cos(ship:latitude)).
    IF inc < 0 { SET az_orb TO 180 - az_orb. }

    LOCAL V_star IS heading(az_orb, 0) * v(0, 0, V_orb).
    LOCAL V_ship_h IS vxcl(up:vector, velocity:orbit).
    LOCAL V_corr IS V_star - V_ship_h.
    LOCAL vel_n IS vdot(V_corr, north:vector).
    LOCAL vel_e IS vdot(V_corr, heading(90, 0):vector).
    LOCAL az_corr IS arctan2(vel_e, vel_n).
    RETURN az_corr.
}

FUNCTION pitch_angle {
    LOCAL offsetApo IS desiredApo * (1 + p + ship:q).
    LOCAL offsetSpeed IS body:atm:height * maxTwr.
    LOCAL speedOrbit IS sqrt(body:mu / (body:radius + offsetSpeed)).
    RETURN (sqrt(apoapsis / offsetApo) + sqrt(groundspeed / speedOrbit)) / 2 * 90.
}

// PHYSICAL PROPERTIES.
LOCAL g IS body:mu / body:position:sqrmagnitude.
LOCAL p IS body:atm:altitudepressure(altitude).

// VARIABLES.
LOCAL burndV IS burn_dV().
LOCAL burnTime IS 0.
LOCAL burnVec IS facing:vector.
LOCAL maxAccel IS ship:availablethrust / ship:mass.
LOCAL maxthrustAtStage IS ship:maxthrustat(0).
LOCAL navAlt IS 100 + alt:radar.
LOCAL navPitch IS 90.
LOCAL navYaw IS 90.
LOCAL nodeTime IS 0.
LOCAL pitchOrbit IS vang(up:vector, velocity:orbit).

LOCAL maxTwr IS maxAccel / g.

IF abs(desiredInc) > 180 - abs(ship:latitude) { SET desiredInc TO 180. }
ELSE IF abs(desiredInc) < abs(ship:latitude) { SET desiredInc TO 0. }

IF desiredApo <= body:atm:height { SET desiredApo TO body:atm:height + 10000. }
IF desiredInc = 180 { SET navYaw TO 270. }

// SYSTEM CONTROL.
LOCAL modeBurn IS FALSE.
LOCAL modeCirc IS FALSE.
LOCAL modeCoast IS FALSE.
LOCAL steeringCtrl IS lookdirup(facing:vector, facing:topvector).
LOCAL throttleCtrl IS 1.

PRINT " ".

sas OFF.
gear OFF.
brakes OFF.
LOCK steering TO steeringCtrl.
LOCK throttle TO throttleCtrl.

UNTIL sas {

      IF NOT modeCirc {

            SET burndV TO burn_dV().
            SET burnTime TO burndV / max(0.001, maxAccel) / 2.
            SET navPitch TO 90 - min(pitch_angle(), pitchOrbit).
            SET pitchOrbit TO vang(up:vector, velocity:orbit).
            SET pitchOrbit TO max(pitchOrbit, 90 - pitchOrbit).
            SET throttleCtrl TO 1 - ship:q^2.

            IF desiredInc <> 0 AND desiredInc <> 180 { SET navYaw TO launch_azimuth(desiredInc). }

            IF airspeed > 100 AND alt:radar > navAlt { SET steeringCtrl TO heading(navYaw, navPitch). }
            ELSE { SET steeringCtrl TO lookdirup(up:vector, facing:topvector). }

            PRINT round(burnTime,2) + "    " at(18,11).
            PRINT round(burndV,2) + "    " at(18,16).

            IF NOT modeCoast AND apoapsis >= desiredApo {
                  SET modeCoast TO TRUE.
                  LOCK throttle TO 0.

            } ELSE IF modeCoast AND eta:apoapsis < burnTime {
                  SET desiredApo TO desiredApo + 10000.
                  SET modeCoast TO FALSE.
                  LOCK throttle TO throttleCtrl.

            } ELSE IF modeCoast AND eta:apoapsis > burnTime AND altitude > body:atm:height {
                  ADD node(time:seconds + eta:apoapsis, 0, 0, burndV).
                  SET modeCirc TO TRUE.
            }

      } ELSE {

            IF NOT modeBurn AND nextnode:eta <= nodeTime {
                  SET modeBurn TO TRUE.
                  SET burnVec TO nextnode:burnvector.
                  LOCK throttle TO throttleCtrl.
            }

            SET burnTime TO burn_time(nextnode:deltav:mag).
            SET nodeTime TO burn_time(nextnode:deltav:mag / 2).
            SET throttleCtrl TO min(1, burnTime).

            IF throttleCtrl < 1 { SET steeringCtrl TO lookdirup(burnVec, facing:topvector).
            } ELSE { SET steeringCtrl TO lookdirup(nextnode:burnvector, facing:topvector). }

            PRINT round(burnTime,1) + "    " at(17,1).
            PRINT round(nodeTime,1) + "    " at(17,2).
            PRINT round(nextnode:eta,1) + "    " at(17,3).
            PRINT round(vang(nextnode:burnvector, facing:vector),1) + "    " at(17,7).
            PRINT round(nextnode:deltav:mag,3) + "      " at(17,8).

            IF modeBurn AND (nextnode:deltav:mag < 0.001 OR vang(burnVec, nextnode:burnvector) > 90) { BREAK. }
      }

      IF maxthrustAtStage > ship:maxthrustat(0) OR maxthrustAtStage = 0 {
            WAIT 1.
            stage.
            WAIT UNTIL stage:ready.
            SET maxthrustAtStage TO ship:maxthrustat(0).
      }

      SET g TO body:mu / body:position:sqrmagnitude.
      SET p TO body:atm:altitudepressure(altitude).
      SET maxAccel TO ship:availablethrust / ship:mass.
      SET maxTwr TO maxAccel / g.

      PRINT round(g,2) + "    " at(18,1).
      PRINT round(maxTwr,2) + "    " at(18,2).
      PRINT round(p,3) + "     " at(18,3).
      PRINT round(ship:q,3) + "     " at(18,4).
      PRINT round(throttleCtrl,2) + "    " at(18,5).
      PRINT round(abs(desiredInc) - obt:inclination,2) + "    " at(18,7).
      PRINT round(navPitch - (90 - vang(up:vector, facing:vector)),2) + "    " at(18,8).
      PRINT round(obt:eccentricity,2) + "    " at(18,12).
      PRINT round(desiredApo - apoapsis) + "  " at(18,14).

      WAIT 0.
}

steeringmanager:resettodefault().
SET ship:control:pilotmainthrottle TO 0.
SET throttleCtrl TO 0.
UNLOCK ALL.
rcs OFF.
sas ON.
