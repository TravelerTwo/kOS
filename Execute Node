CLEARSCREEN.
SET config:ipu TO 400.
SET terminal:height TO 20.
SET terminal:width TO 40.

FUNCTION burn_info {
    PARAMETER dV.
    LOCAL i IS 0.
    LOCAL burndV IS 0.
    LOCAL burnTime IS 0.
    LOCAL checkMean IS TRUE.
    LOCAL meanTime IS 0.

    FOR s IN list_stages {
        LOCAL stagedV IS s[5].
        LOCAL ve IS 9.80665 * s[4].

        IF checkMean AND burndV + stagedV >= dV / 2 {
            LOCAL meanMass IS s[0] / constant:e^((dV / 2 - burndV) / ve).
            SET checkMean TO FALSE.
            SET meanTime TO burnTime + (s[0] - meanMass) / s[3].
            PRINT round(meanTime,1) + "    " at(17,1).
        }

        IF burndV + stagedV > dV { SET stagedV TO dV - burndV. }
        LOCAL burnMass IS s[0] / constant:e^(stagedV / ve).

        SET burndV TO burndV + stagedV.
        SET burnTime TO burnTime + (s[0] - burnMass) / s[3] + i.
        SET i TO i + 1.

        IF burndV >= dV { BREAK. }

        WAIT 0.
    }

    IF burndV < dV {
        PRINT " Insufficient delta-v: " + round(burndV,2).
        RETURN list(0,0).

    } ELSE { RETURN list(burnTime, meanTime). }
}

FUNCTION stage_info {
    LOCAL endpart IS ship:rootpart.
    LOCAL list_roots IS list().
    LOCAL list_sections IS list().
    LOCAL t0 IS time:seconds.

    FOR p IN ship:parts {
        IF p:istype("Engine") AND p:stage > endpart:stage { SET endpart TO p. }
        WAIT 0.
    }

    FUNCTION root_search {
        PARAMETER p.
        WAIT 0.

        LOCAL add_root IS FALSE.

        IF p:hasparent {
            IF p:parent:name:contains("EnginePlate") AND NOT p:istype("Engine") { SET add_root TO TRUE. }
            IF p:parent:istype("Engine") AND p:istype("Decoupler") { SET add_root TO TRUE. }

        } ELSE IF NOT p:hasparent { SET add_root TO TRUE. }

        IF add_root {
            LOCAL section IS list().

            list_roots:insert(0, p).

            FUNCTION section_search {
                PARAMETER p.
                WAIT 0.

                section:add(p).

                IF NOT p:children:empty {
                    FOR c IN p:children {
                        IF NOT list_roots:contains(c) { section_search(c). }
                    }
                }
            }
            section_search(list_roots[0]).
            list_sections:insert(0, section).
        }
        IF p:hasparent { root_search(p:parent). }
    }

    root_search(endpart).

    LOCAL i IS 0.
    LOCAL list_stages IS list().
    LOCAL m IS 0.

    FOR s IN list_sections {
        LOCAL section IS list(0,0,0,0,0,0). // mass, drymass, thrust, flow, isp, dV

        FOR p IN s {
            IF p:istype("Engine") AND p:allowshutdown {
                IF section[1] = 0 {
                    LOCAL a IS CHOOSE TRUE IF NOT p:ignition ELSE FALSE.
                    IF a { p:activate. }

                    FOR r IN p:consumedresources:keys {
                        WAIT 0.
                        SET section[1] TO section[1] + p:consumedresources[r]:amount * p:consumedresources[r]:density.
                    }
                    IF a { p:shutdown. }
                }
                SET section[2] TO section[2] + p:possiblethrustat(0).
                SET section[3] TO section[3] + p:possiblethrustat(0) / (9.80665 * p:visp).
                SET section[4] TO section[2] / (9.80665 * section[3]).
            }
            SET m TO m + p:mass.
            WAIT 0.
        }
        SET section[0] TO m.
        SET section[1] TO section[0] - section[1].
        SET section[5] TO (9.80665 * section[4]) * ln(section[0] / section[1]).
        list_stages:insert(0, section).
    }
    PRINT " Runtime: " + round(time:seconds - t0,2) + "; Stages: " + list_stages:length.
    RETURN list_stages.
}

// LISTS.
LOCAL burnInfo IS list().
LOCAL list_stages IS stage_info().

// VARIABLES.
LOCAL burnMass IS 0.
LOCAL burnTime IS 0.
LOCAL burnVec IS nextnode:burnvector.
LOCAL maxthrustAtStage IS ship:maxthrustat(0).
LOCAL stagedV IS 0.
LOCAL ve IS 9.80665 * list_stages[0][4].

// SYSTEM CONTROL.
LOCAL modeBurn IS FALSE.
LOCAL steeringCtrl IS lookdirup(nextnode:burnvector, facing:topvector).
LOCAL throttleCtrl IS 1.

PRINT " ".
PRINT " Burn start    =".
PRINT " Burn time     =".
PRINT " Node ETA      =".
PRINT "--------------------------".
PRINT " ".
PRINT " Node angle    =".
PRINT " Node delta-v  =".
PRINT " Stage delta-v =".
PRINT "--------------------------".

rcs OFF.
sas OFF.
LOCK steering TO steeringCtrl.
LOCK throttle TO 0.

SET burnInfo TO burn_info(nextnode:deltav:mag).
SET burnTime TO burnInfo[0].

UNTIL sas {

      IF NOT modeBurn AND nextnode:eta <= burnInfo[1] {
            SET burnVec TO nextnode:burnvector.
            SET modeBurn TO TRUE.
            LOCK throttle TO throttleCtrl.
      }

      IF maxthrustAtStage > ship:maxthrustat(0) OR maxthrustAtStage = 0 {
            SET throttleCtrl TO 0.
            WAIT 0.4.
            stage.
            WAIT UNTIL stage:ready.
            SET maxthrustAtStage TO ship:maxthrustat(0).

            IF maxthrustAtStage <> 0 {
                  SET list_stages TO stage_info().
                  SET ve TO 9.80665 * list_stages[0][4].

                  SET burnInfo TO burn_info(nextnode:deltav:mag).
                  SET burnTime TO burnInfo[0].
            }
      }

      IF nextnode:deltav:mag < stagedV {
            SET burnMass TO ship:mass / constant:e^(nextnode:deltav:mag / ve).
            SET burnTime TO (ship:mass - burnMass) / list_stages[0][3].
      }

      SET stagedV TO ve * ln(ship:mass / list_stages[0][1]).
      SET steeringCtrl TO CHOOSE lookdirup(nextnode:burnvector, facing:topvector) IF throttleCtrl >= 1 ELSE lookdirup(burnVec, facing:topvector).
      SET throttleCtrl TO min(1, burnTime).

      PRINT round(burnTime,1) + "    " at(17,2).
      PRINT round(nextnode:eta,1) + "    " at(17,3).
      PRINT round(vang(nextnode:burnvector, facing:vector),1) + "    " at(17,6).
      PRINT round(nextnode:deltav:mag,2) + "    " at(17,7).
      PRINT round(stagedV,2) + "    " at(17,8).

      IF burnTime < 0.001 OR modeBurn AND vang(burnVec, nextnode:burnvector) > 90 { BREAK. }

      WAIT 0.
}

SET ship:control:pilotmainthrottle TO 0.
SET throttleCtrl TO 0.
UNLOCK ALL.
sas ON.
