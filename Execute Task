// Master script for minor tasks, setting up or maneuvers to circularize, change inclination, etc.
// "Inc" doesn't account for shifting velocity.

PARAMETER task IS "inc".

IF task = "circ" {
    LOCAL eVar IS eta:apoapsis.
    LOCAL var IS apoapsis.

    IF eta:apoapsis > eta:periapsis {
        SET var TO periapsis.
        SET eVar TO eta:periapsis.
    }

    LOCAL rad IS body:radius + var.
    LOCAL velCirc IS sqrt(body:mu / rad).
    LOCAL velVar IS sqrt(body:mu * (2 / rad - 1 / obt:semimajoraxis)).

    SET mnv TO node(time:seconds + eVar, 0, 0, velCirc - velVar).
    ADD mnv.

} ELSE IF task = "copy" {
    copypath("0:/deorbit_burn", "db").
    copypath("0:/exec_node", "en").
    copypath("0:/exec_task", "et").
    copypath("0:/launch", "l").
    copypath("0:/lib_info", "lib_info").

} ELSE IF task = "inc" {

    IF NOT HASTARGET {
        PRINT "Select target...".
        WAIT UNTIL HASTARGET.
    }

    LOCAL angVel IS vcrs(velocity:orbit, ship:position - body:position).
    LOCAL angVelTar IS vcrs(target:velocity:orbit, target:position - body:position).
    LOCAL anVec IS vcrs(angVel, angVelTar).
    LOCAL e IS obt:eccentricity.
    LOCAL ta IS obt:trueanomaly.
    LOCAL vec IS vcrs(-1 * body:position, anVec):normalized + angVel:normalized.
    LOCAL ang IS vang(anVec, -1 * body:position).
    LOCAL anTa IS 0.

    IF vec:mag > 1 {
        SET anTa TO ta - ang.
        IF anTa < 0 { SET anTa TO 360 + anTa. }
        IF anTa > 360 { SET anTa TO anTa - 360. }

    } ELSE {
        SET anTa TO ta + ang.
        IF anTa < 0 { SET anTa TO 360 + anTa. }
        IF anTa > 360 { SET anTa TO anTa - 360. }
    }

    LOCAL ea IS 2 * arctan((tan(ta / 2)) / sqrt((1 + e) / (1 - e))).
    LOCAL ma IS ea * constant:pi / 180 - e * sin(ea).
    LOCAL anEa IS 2 * arctan((tan(anTa / 2)) / sqrt((1 + e) / (1 - e))).
    LOCAL anMa IS anEa * constant:pi / 180 - e * sin(anEa).
    LOCAL n IS sqrt(body:mu / (obt:semimajoraxis)^3).
    LOCAL anEta IS (anMa - ma) / n.

    IF anEta < 0 { SET anEta TO obt:period + anEta. }

    LOCAL deltaAng IS vang(angVel, angVelTar).
    LOCAL dV IS 2 * velocityat(ship, time:seconds + anEta):orbit:mag * sin(deltaAng / 2).

    SET mnv TO node(time:seconds + anEta, 0, -dV, 0).
    ADD mnv.

} ELSE IF task = "phase" {

// Exclude solar system vector.
// Sign angles.

    CLEARSCREEN.

    LOCAL origin IS body:position.

    PRINT "Origin: " + body:name.
    PRINT " ".
    PRINT "Moho:   " + round(vang(origin - sun:position, moho:position - sun:position),2).
    PRINT "Eve:    " + round(vang(origin - sun:position, eve:position - sun:position),2).
    PRINT "Kerbin: " + round(vang(origin - sun:position, kerbin:position - sun:position),2).
    PRINT "Duna:   " + round(vang(origin - sun:position, duna:position - sun:position),2).
    PRINT "Dres:   " + round(vang(origin - sun:position, dres:position - sun:position),2).
    PRINT "Jool:   " + round(vang(origin - sun:position, jool:position - sun:position),2).
    PRINT "Eeloo:  " + round(vang(origin - sun:position, eeloo:position - sun:position),2).

} ELSE IF task = "rel" {

    CLEARSCREEN.

    PRINT " Synchronous altitudes".
    PRINT " 1x " + round(((body:mu * body:rotationperiod^2) / (4 * constant:pi^2)) ^ (1 / 3) - body:radius).
    PRINT " 2x " + round(((body:mu * (body:rotationperiod / 2)^2) / (4 * constant:pi^2)) ^ (1 / 3) - body:radius).
    PRINT " 4x " + round(((body:mu * (body:rotationperiod / 4)^2) / (4 * constant:pi^2)) ^ (1 / 3) - body:radius).
    PRINT " 6x " + round(((body:mu * (body:rotationperiod / 6)^2) / (4 * constant:pi^2)) ^ (1 / 3) - body:radius).
    PRINT " 8x " + round(((body:mu * (body:rotationperiod / 8)^2) / (4 * constant:pi^2)) ^ (1 / 3) - body:radius).
    PRINT " ".
    PRINT " Apoapsis:".
    PRINT " Periapsis:".
    PRINT " ".
    PRINT " Inclination:".
    PRINT " Eccentricity:".

    UNTIL NOT sas {
        PRINT round(apoapsis) + "  " at(11,7).
        PRINT round(periapsis) + "  " at(12,8).
        PRINT round(obt:inclination,4) + "      " at(14,10).
        PRINT round(obt:eccentricity,4) + "      " at(15,11).

        WAIT 0.
    }

    sas ON.

// } ELSE IF task = "rend" {

// target:velocity:orbit - velocity:orbit = steering (and velocity?).

}
